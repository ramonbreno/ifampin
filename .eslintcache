[{"D:\\docs\\Documents\\workspace\\signal\\src\\index.tsx":"1","D:\\docs\\Documents\\workspace\\signal\\src\\App.tsx":"2","D:\\docs\\Documents\\workspace\\signal\\src\\Dashboard.tsx":"3","D:\\docs\\Documents\\workspace\\signal\\src\\listItems.tsx":"4","D:\\docs\\Documents\\workspace\\signal\\src\\Deposits.tsx":"5","D:\\docs\\Documents\\workspace\\signal\\src\\Orders.tsx":"6","D:\\docs\\Documents\\workspace\\signal\\src\\Title.tsx":"7","D:\\docs\\Documents\\workspace\\signal\\src\\dashboard.tsx":"8","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\Chart.tsx":"9","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\ResponseTimeChart.tsx":"10","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\ComprehensionChart..tsx":"11","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\ChartTest.tsx":"12","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\AssertividadeChart.tsx":"13","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemAssertividadeChart.tsx":"14","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DuvidaAssertividadeChart.tsx":"15","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\CompreensaoAssertividadeChart.tsx":"16","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemTempoChart.tsx":"17","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemDuvidaChart.tsx":"18","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DuvidaTempoChart.tsx":"19","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\CompreensaoMediaChart.tsx":"20","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DuvidaMediaChart.tsx":"21","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemMediaChart.tsx":"22","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\TempoMediaChart.tsx":"23"},{"size":197,"mtime":1612062486903,"results":"24","hashOfConfig":"25"},{"size":567,"mtime":1612062557119,"results":"26","hashOfConfig":"25"},{"size":12444,"mtime":1617839938979,"results":"27","hashOfConfig":"25"},{"size":2341,"mtime":1612061745568,"results":"28","hashOfConfig":"25"},{"size":979,"mtime":1612043529841,"results":"29","hashOfConfig":"25"},{"size":2789,"mtime":1612043557106,"results":"30","hashOfConfig":"25"},{"size":437,"mtime":1612043221853,"results":"31","hashOfConfig":"25"},{"size":6108,"mtime":1612042616682,"results":"32","hashOfConfig":"25"},{"size":1622,"mtime":1612116890892,"results":"33","hashOfConfig":"25"},{"size":2965,"mtime":1613001540755,"results":"34","hashOfConfig":"25"},{"size":6023,"mtime":1614048383595,"results":"35","hashOfConfig":"25"},{"size":9276,"mtime":1616632543045,"results":"36","hashOfConfig":"25"},{"size":7116,"mtime":1616711337384,"results":"37","hashOfConfig":"25"},{"size":3592,"mtime":1617762939668,"results":"38","hashOfConfig":"25"},{"size":3536,"mtime":1617763640226,"results":"39","hashOfConfig":"25"},{"size":3607,"mtime":1617836997307,"results":"40","hashOfConfig":"25"},{"size":3238,"mtime":1617837358839,"results":"41","hashOfConfig":"25"},{"size":3252,"mtime":1617837640045,"results":"42","hashOfConfig":"25"},{"size":3202,"mtime":1617837757540,"results":"43","hashOfConfig":"25"},{"size":3353,"mtime":1617839673196,"results":"44","hashOfConfig":"25"},{"size":3262,"mtime":1617839688197,"results":"45","hashOfConfig":"25"},{"size":3298,"mtime":1617839819324,"results":"46","hashOfConfig":"25"},{"size":3250,"mtime":1617839901989,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"srzp3b",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"50"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\docs\\Documents\\workspace\\signal\\src\\index.tsx",[],["110","111"],"D:\\docs\\Documents\\workspace\\signal\\src\\App.tsx",[],"D:\\docs\\Documents\\workspace\\signal\\src\\Dashboard.tsx",["112","113","114","115","116"],"D:\\docs\\Documents\\workspace\\signal\\src\\listItems.tsx",["117","118","119","120"],"import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\n\r\nexport const mainListItems = (\r\n    <div>\r\n        {/* <ListItem button>\r\n            <ListItemIcon>\r\n                <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <ShoppingCartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Orders\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Customers\" />\r\n        </ListItem> */}\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <BarChartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"GrÃ¡ficos\" />\r\n        </ListItem>\r\n        {/* <ListItem button>\r\n            <ListItemIcon>\r\n                <LayersIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Integrations\" />\r\n        </ListItem> */}\r\n    </div>\r\n);\r\n\r\nexport const secondaryListItems = (\r\n    <div>\r\n        <ListSubheader inset>Saved reports</ListSubheader>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Current month\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Last quarter\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n            <ListItemIcon>\r\n                <AssignmentIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Year-end sale\" />\r\n        </ListItem>\r\n    </div>\r\n);","D:\\docs\\Documents\\workspace\\signal\\src\\Deposits.tsx",[],"D:\\docs\\Documents\\workspace\\signal\\src\\Orders.tsx",[],"D:\\docs\\Documents\\workspace\\signal\\src\\Title.tsx",[],"D:\\docs\\Documents\\workspace\\signal\\src\\dashboard.tsx",[],"D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\Chart.tsx",["121"],"import React from 'react';\r\nimport {\r\n    BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\n\r\nconst data = [\r\n    {\r\n        name: 'Aluno 1', Q1: 1, Q2: 4, Q3: 1, Q4: 1, Q5: 3\r\n    },\r\n    {\r\n        name: 'Aluno 2', Q1: 1, Q2: 1, Q3: 1, Q4: 1, Q5: 2\r\n    },\r\n    {\r\n        name: 'Aluno 3', Q1: 1, Q2: 2, Q3: 3, Q4: 1, Q5: 1\r\n    },\r\n    {\r\n        name: 'Aluno 4', Q1: 1, Q2: 1, Q3: 1, Q4: 6, Q5: 2\r\n    },\r\n    {\r\n        name: 'Aluno 5', Q1: 1, Q2: 2, Q3: 1, Q4: 1, Q5: 1\r\n    },\r\n    {\r\n        name: 'Aluno 6', Q1: 1, Q2: 1, Q3: 1, Q4: 2, Q5: 1\r\n    },\r\n];\r\n\r\nconst Chart: React.FC<any> = ({ title }) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <BarChart\r\n                width={600}\r\n                height={300}\r\n                data={data}\r\n                style={{\r\n                    margin: '10px auto'\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"1 1\" />\r\n                <XAxis dataKey=\"name\" />\r\n\r\n                <YAxis type=\"number\" tickCount={12} tickSize={5} />\r\n\r\n                <Tooltip />\r\n                <Legend />\r\n                <Bar dataKey=\"Q1\" stackId=\"a\" fill=\"#054f77\" />\r\n                <Bar dataKey=\"Q2\" stackId=\"a\" fill=\"#8884d8\" />\r\n                <Bar dataKey=\"Q3\" stackId=\"a\" fill=\"#ff6961\" />\r\n                <Bar dataKey=\"Q4\" stackId=\"a\" fill=\"#03bb85\" />\r\n                <Bar dataKey=\"Q5\" stackId=\"a\" fill=\"#eead2d\" />\r\n            </BarChart>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default Chart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\ResponseTimeChart.tsx",["122","123","124","125","126","127","128"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport ResponseTimeData from '../../../contracts/modules/charts/tempo_resposta.json';\r\n\r\nconst data = [\r\n    {\r\n        name: 'Aluno 1', Q1: 1, Q2: 4, Q3: 1, Q4: 1, Q5: 3\r\n    },\r\n    {\r\n        name: 'Aluno 2', Q1: 1, Q2: 1, Q3: 1, Q4: 1, Q5: 2\r\n    },\r\n    {\r\n        name: 'Aluno 3', Q1: 1, Q2: 2, Q3: 3, Q4: 1, Q5: 1\r\n    },\r\n    {\r\n        name: 'Aluno 4', Q1: 1, Q2: 1, Q3: 1, Q4: 6, Q5: 2\r\n    },\r\n    {\r\n        name: 'Aluno 5', Q1: 1, Q2: 2, Q3: 1, Q4: 1, Q5: 1\r\n    },\r\n    {\r\n        name: 'Aluno 6', Q1: 1, Q2: 1, Q3: 1, Q4: 2, Q5: 1\r\n    },\r\n];\r\n\r\nconst ResponseTimeChart: React.FC<any> = ({ title }) => {\r\n    const [dados, setDados] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n        let aluno1 = [],\r\n            obj = {},\r\n            obj2 = {},\r\n            dadosAux = [];\r\n\r\n        aluno1 = ResponseTimeData.filter((item) => {\r\n            if (item.id_simulado === 1 && item.id_estudante === '2018139340118') {\r\n                const othersFields = {\r\n                    [\"name\"]: `Aluno ${item.id_estudante}`,\r\n                    [`Q${item.questao}`]: item.tempo,\r\n                    dataKey: `Q${item.questao}`\r\n                };\r\n\r\n                obj = {\r\n                    ...obj, ...othersFields\r\n                };\r\n            }\r\n            if (item.id_simulado === 1 && item.id_estudante === '2018139340207') {\r\n                const othersFields = {\r\n                    [\"name\"]: `Aluno ${item.id_estudante}`,\r\n                    [`Q${item.questao}`]: item.tempo,\r\n                    dataKey: `Q${item.questao}`\r\n                };\r\n\r\n                obj2 = {\r\n                    ...obj2, ...othersFields\r\n                };\r\n            }\r\n        });\r\n        dadosAux.push(obj);\r\n        dadosAux.push(obj2);\r\n\r\n        setDados(dadosAux);\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <BarChart\r\n                width={600}\r\n                height={350}\r\n                data={dados}\r\n                style={{\r\n                    margin: '10px auto'\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"1 1\" />\r\n                <XAxis dataKey=\"name\" />\r\n\r\n                <YAxis type=\"number\" /* tickCount={12} tickSize={5} */ />\r\n\r\n                <Tooltip />\r\n\r\n                <Legend />\r\n\r\n                <Bar dataKey=\"Q1\" stackId=\"a\" fill=\"#054f77\" />\r\n                <Bar dataKey=\"Q2\" stackId=\"a\" fill=\"#8884d8\" />\r\n                <Bar dataKey=\"Q3\" stackId=\"a\" fill=\"#ff6961\" />\r\n                <Bar dataKey=\"Q4\" stackId=\"a\" fill=\"#03bb85\" />\r\n                <Bar dataKey=\"Q5\" stackId=\"a\" fill=\"#eead2d\" />\r\n            </BarChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ResponseTimeChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\ComprehensionChart..tsx",["129","130","131","132"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport ResponseTimeData from '../../../contracts/modules/charts/tempo_resposta.json';\r\nimport Compreensao from '../../../contracts/modules/charts/compreensao_questao.json';\r\n\r\nconst data01 = [\r\n    {\r\n        \"x\": 100,\r\n        \"y\": 200,\r\n        \"z\": 200\r\n    },\r\n    {\r\n        \"x\": 120,\r\n        \"y\": 100,\r\n        \"z\": 260\r\n    },\r\n    {\r\n        \"x\": 170,\r\n        \"y\": 300,\r\n        \"z\": 400\r\n    },\r\n    {\r\n        \"x\": 140,\r\n        \"y\": 250,\r\n        \"z\": 280\r\n    },\r\n    {\r\n        \"x\": 150,\r\n        \"y\": 400,\r\n        \"z\": 500\r\n    },\r\n    {\r\n        \"x\": 110,\r\n        \"y\": 280,\r\n        \"z\": 200\r\n    }\r\n];\r\nconst data02 = [\r\n    {\r\n        \"x\": 200,\r\n        \"y\": 260,\r\n        \"z\": 240\r\n    },\r\n    {\r\n        \"x\": 240,\r\n        \"y\": 290,\r\n        \"z\": 220\r\n    },\r\n    {\r\n        \"x\": 190,\r\n        \"y\": 290,\r\n        \"z\": 250\r\n    },\r\n    {\r\n        \"x\": 198,\r\n        \"y\": 250,\r\n        \"z\": 210\r\n    },\r\n    {\r\n        \"x\": 180,\r\n        \"y\": 280,\r\n        \"z\": 260\r\n    },\r\n    {\r\n        \"x\": 210,\r\n        \"y\": 220,\r\n        \"z\": 230\r\n    }\r\n];\r\n\r\nconst ComprehensionChart: React.FC<any> = ({ title }) => {\r\n    const [dadosAluno1, setDadosAluno1] = useState<Array<Object>>([]);\r\n    const [dadosAluno2, setDadosAluno2] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [];\r\n\r\n        let compreensaoAluno1 = Compreensao.filter((item) => item.id_estudante === '2018139340118' && item.id_simulado === 1/*  && item.questao == 1 */);\r\n        let tempoAluno1 = ResponseTimeData.filter((item) => item.id_estudante === '2018139340118' && item.id_simulado === 1/*  && item.questao == 1 */);\r\n        let dadosAluno1Aux: { _id: { $oid: string; }; id_estudante: string; id_simulado: number; questao: number; tempo: number; }[] = [];\r\n\r\n        Compreensao.forEach(item => {\r\n            for (var i = 0; i < ResponseTimeData.length; i++) {\r\n                let kmensItem = [];\r\n                if (item.id_simulado !== 1) break;\r\n                if (item.questao !== 2) break;\r\n\r\n                if (item.id_estudante === ResponseTimeData[i].id_estudante &&\r\n                    item.id_simulado === ResponseTimeData[i].id_simulado &&\r\n                    item.questao === ResponseTimeData[i].questao\r\n                ) {\r\n                    kmensItem.push(parseFloat(item.comprensao.toFixed(2)));\r\n                    kmensItem.push(ResponseTimeData[i].tempo);\r\n                    kmensList.push(kmensItem);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        //console.log(JSON.stringify(kmensList));\r\n\r\n        tempoAluno1.forEach((item) => {\r\n            let objComp: {\r\n                _id: {\r\n                    $oid: string;\r\n                };\r\n                id_estudante: string;\r\n                id_simulado: number;\r\n                questao: number;\r\n                comprensao: number;\r\n            }[] = [];\r\n            objComp = compreensaoAluno1.filter((i) => i.questao === item.questao);\r\n\r\n            dadosAluno1Aux.push({\r\n                ...item, ...{ comprensao: objComp[0].comprensao }\r\n            });\r\n        });\r\n\r\n        let compreensaoAluno2 = Compreensao.filter((item) => item.id_estudante === '2018139340207' && item.id_simulado === 1/*  && item.questao == 1 */);\r\n        let tempoAluno2 = ResponseTimeData.filter((item) => item.id_estudante === '2018139340207' && item.id_simulado === 1/*  && item.questao == 1 */);\r\n        let dadosAluno2Aux: { _id: { $oid: string; }; id_estudante: string; id_simulado: number; questao: number; tempo: number; }[] = [];\r\n\r\n        tempoAluno2.forEach((item) => {\r\n            let objComp: {\r\n                _id: {\r\n                    $oid: string;\r\n                };\r\n                id_estudante: string;\r\n                id_simulado: number;\r\n                questao: number;\r\n                comprensao: number;\r\n            }[] = [];\r\n            objComp = compreensaoAluno2.filter((i) => i.questao === item.questao);\r\n\r\n            dadosAluno2Aux.push({\r\n                ...item, ...{ comprensao: objComp[0].comprensao }\r\n            });\r\n        });\r\n        /* console.log(dadosAluno1Aux);\r\n        console.log(dadosAluno2Aux); */\r\n        setDadosAluno1(dadosAluno1Aux);\r\n        setDadosAluno2(dadosAluno2Aux);\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"comprensao\" name=\"compreensÃ£o\" unit=\"c\" />\r\n                <YAxis dataKey=\"tempo\" name=\"tempo\" unit=\"s\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={dadosAluno2} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={dadosAluno1} fill=\"#8884d8\" />\r\n            </ScatterChart>\r\n            {/* <ScatterChart width={730} height={250}\r\n                style={{\r\n                    margin: '20px auto'\r\n                }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"stature\" unit=\"cm\" />\r\n                <YAxis dataKey=\"y\" name=\"weight\" unit=\"kg\" />\r\n                <ZAxis dataKey=\"z\" range={[64, 144]} name=\"score\" unit=\"km\" />\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n                <Scatter className=\"A school\" data={data01} fill=\"#8884d8\" />\r\n                <Scatter className=\"B school\" data={data02} fill=\"#82ca9d\" />\r\n            </ScatterChart> */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ComprehensionChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\ChartTest.tsx",["133","134","135","136","137","138","139"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport ResponseTimeData from '../../../contracts/modules/charts/tempo_resposta.json';\r\nimport Compreensao from '../../../contracts/modules/charts/compreensao_questao.json';\r\n\r\nconst data01 = [\r\n    {\r\n        \"x\": 100,\r\n        \"y\": 200,\r\n        \"z\": 200\r\n    },\r\n    {\r\n        \"x\": 120,\r\n        \"y\": 100,\r\n        \"z\": 260\r\n    },\r\n    {\r\n        \"x\": 170,\r\n        \"y\": 300,\r\n        \"z\": 400\r\n    },\r\n    {\r\n        \"x\": 140,\r\n        \"y\": 250,\r\n        \"z\": 280\r\n    },\r\n    {\r\n        \"x\": 150,\r\n        \"y\": 400,\r\n        \"z\": 500\r\n    },\r\n    {\r\n        \"x\": 110,\r\n        \"y\": 280,\r\n        \"z\": 200\r\n    }\r\n];\r\nconst data02 = [\r\n    {\r\n        \"x\": 200,\r\n        \"y\": 260,\r\n        \"z\": 240\r\n    },\r\n    {\r\n        \"x\": 240,\r\n        \"y\": 290,\r\n        \"z\": 220\r\n    },\r\n    {\r\n        \"x\": 190,\r\n        \"y\": 290,\r\n        \"z\": 250\r\n    },\r\n    {\r\n        \"x\": 198,\r\n        \"y\": 250,\r\n        \"z\": 210\r\n    },\r\n    {\r\n        \"x\": 180,\r\n        \"y\": 280,\r\n        \"z\": 260\r\n    },\r\n    {\r\n        \"x\": 210,\r\n        \"y\": 220,\r\n        \"z\": 230\r\n    }\r\n];\r\n\r\nconst ChartTest: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n\r\n            mediaCompList: {\r\n                id_estudante: String,\r\n                id_simulado: number,\r\n                comprensao: number\r\n            }[] = [],\r\n\r\n            mediaTempoList: {\r\n                id_estudante: String,\r\n                id_simulado: number,\r\n                tempo: number\r\n            }[] = [],\r\n\r\n            currentStudant: String = '',\r\n            mediaComp = 0,\r\n            mediaTempo = 0,\r\n            somaComp = 0,\r\n            somaTempo = 0,\r\n            contQuestions = 0,\r\n            maiorTempo = 0,\r\n            maiorComp = 0\r\n            ;\r\n        Compreensao.forEach((item) => {//FALTA O ULTIMO ALUNO\r\n            if (item.id_simulado === 1) {\r\n                if (contQuestions === 0)//rever lÃ³gica para esse IF\r\n                    currentStudant = item.id_estudante;\r\n\r\n                if (item.id_estudante != currentStudant /* && somaComp > 0 */) {\r\n                    mediaComp = somaComp / contQuestions;\r\n                    contQuestions = 0\r\n                    somaComp = 0\r\n                    mediaCompList.push({\r\n                        \"id_estudante\": currentStudant,\r\n                        \"id_simulado\": item.id_simulado,\r\n                        \"comprensao\": mediaComp\r\n                    });\r\n\r\n                    if (mediaComp > maiorComp)\r\n                        maiorComp = parseFloat(mediaComp.toFixed(2));\r\n                    currentStudant = item.id_estudante;\r\n                }\r\n\r\n                somaComp += item.comprensao;\r\n                contQuestions++;\r\n            }\r\n\r\n        });\r\n        contQuestions = 0;\r\n        somaTempo = 0;\r\n        ResponseTimeData.forEach((item) => {\r\n            if (item.id_simulado === 1) {\r\n                if (contQuestions === 0)//rever lÃ³gica para esse IF\r\n                    currentStudant = item.id_estudante;\r\n\r\n                if (item.id_estudante != currentStudant /* && somaTempo > 0 */) {\r\n\r\n                    mediaTempo = somaTempo / contQuestions;\r\n                    contQuestions = 0\r\n                    somaTempo = 0\r\n                    mediaTempoList.push({\r\n                        \"id_estudante\": currentStudant,\r\n                        \"id_simulado\": item.id_simulado,\r\n                        \"tempo\": mediaTempo\r\n                    });\r\n\r\n                    if (mediaTempo > maiorTempo)\r\n                        maiorTempo = parseFloat(mediaTempo.toFixed(2));\r\n\r\n                    currentStudant = item.id_estudante;\r\n                }\r\n\r\n                somaTempo += item.tempo;\r\n                contQuestions++;\r\n            }\r\n\r\n        });\r\n\r\n\r\n\r\n        mediaCompList.forEach(item => {\r\n            for (var i = 0; i < mediaTempoList.length; i++) {\r\n                let kmensItem = [];\r\n                //if (item.id_simulado !== 1) break;\r\n                //if (item.questao !== 2) break;\r\n\r\n                if (item.id_estudante === mediaTempoList[i].id_estudante\r\n                    /*&& item.id_simulado === ResponseTimeData[i].id_simulado  &&\r\n                    item.questao === ResponseTimeData[i].questao */\r\n                ) {\r\n\r\n                    kmensItem.push(parseFloat(item.comprensao.toFixed(2)));\r\n                    kmensItem.push(mediaTempoList[i].tempo);\r\n                    kmensList.push(kmensItem);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const compreensao = item[0],\r\n                tempo = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": tempo,\r\n                \"y\": compreensao\r\n            };\r\n\r\n            if (compreensao >= 0 && compreensao <= maiorComp / 2 &&\r\n                tempo >= 0 && tempo <= maiorTempo / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (compreensao > maiorComp / 2 && compreensao <= maiorComp &&\r\n                tempo >= 0 && tempo <= maiorTempo / 2) {\r\n                grupo2.push(dadosItem);\r\n            } else if (compreensao >= 0 && compreensao <= maiorComp / 2 &&\r\n                tempo > maiorTempo / 2 && tempo <= maiorTempo) {\r\n                grupo3.push(dadosItem);\r\n            } else if (compreensao > maiorComp / 2 && compreensao <= maiorComp &&\r\n                tempo > maiorTempo / 2 && tempo <= maiorTempo) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"tempo\" unit=\"s\" />\r\n                <YAxis dataKey=\"y\" name=\"compreensÃ£o\" unit=\"c\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ChartTest;\r\n\r\n/* QUANDO TINHAN TODAS AS QUESTÃES - SEM MÃDIA\r\nuseEffect(() => {\r\n\r\n                        let kmensList: Array<Array<number>> = [];\r\n\r\n        Compreensao.forEach(item => {\r\n            for (var i = 0; i < ResponseTimeData.length; {\r\n                            let kmensItem = [];\r\n                if (item.id_simulado !== 1) break;\r\n                //if (item.questao !== 2) break;\r\n\r\n                if (item.id_estudante === ResponseTimeData[i].id_estudante &&\r\n                    item.id_simulado === ResponseTimeData[i].id_simulado &&\r\n                    item.questao === ResponseTimeData[i].questao\r\n                ) {\r\n                            kmensItem.push(parseFloat(item.comprensao.toFixed(2)));\r\n                    kmensItem.push(ResponseTimeData[i].tempo);\r\n                    kmensList.push(kmensItem);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n                            let dadosItem = { };\r\n            const compreensao = item[0],\r\n                tempo = item[1];\r\n\r\n            dadosItem = {\r\n                            \"x\": tempo,\r\n                \"y\": compreensao\r\n            };\r\n\r\n            if (compreensao >= 0 && compreensao <= 0.5 &&\r\n                tempo >= 0 && tempo <= 500) {\r\n\r\n                            grupo1.push(dadosItem);\r\n            } else if (compreensao > 0.5 && compreensao <= 1 &&\r\n                tempo >= 0 && tempo <= 500) {\r\n\r\n                            grupo2.push(dadosItem);\r\n            } else if (compreensao >= 0 && compreensao <= 0.5 &&\r\n                tempo > 500 && tempo <= 1000) {\r\n\r\n                            grupo3.push(dadosItem);\r\n            } else if (compreensao > 5 && compreensao <= 1 &&\r\n                tempo > 500 && tempo <= 1000) {\r\n                            console.log('grupo4');\r\n                grupo4.push(dadosItem);\r\n            }else{\r\n                            console.log('teste');\r\n            }\r\n        });\r\n\r\n        //console.log(JSON.stringify(grupo4));\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n*/","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\AssertividadeChart.tsx",["140","141","142","143","144","145","146","147","148","149","150","151"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport ResponseTimeData from '../../../contracts/modules/charts/tempo_resposta.json';\r\nimport AssertividadeData from '../../../contracts/modules/charts/assertividade.json';\r\n\r\nconst data01 = [\r\n    {\r\n        \"x\": 100,\r\n        \"y\": 200,\r\n        \"z\": 200\r\n    },\r\n    {\r\n        \"x\": 120,\r\n        \"y\": 100,\r\n        \"z\": 260\r\n    },\r\n    {\r\n        \"x\": 170,\r\n        \"y\": 300,\r\n        \"z\": 400\r\n    },\r\n    {\r\n        \"x\": 140,\r\n        \"y\": 250,\r\n        \"z\": 280\r\n    },\r\n    {\r\n        \"x\": 150,\r\n        \"y\": 400,\r\n        \"z\": 500\r\n    },\r\n    {\r\n        \"x\": 110,\r\n        \"y\": 280,\r\n        \"z\": 200\r\n    }\r\n];\r\nconst data02 = [\r\n    {\r\n        \"x\": 200,\r\n        \"y\": 260,\r\n        \"z\": 240\r\n    },\r\n    {\r\n        \"x\": 240,\r\n        \"y\": 290,\r\n        \"z\": 220\r\n    },\r\n    {\r\n        \"x\": 190,\r\n        \"y\": 290,\r\n        \"z\": 250\r\n    },\r\n    {\r\n        \"x\": 198,\r\n        \"y\": 250,\r\n        \"z\": 210\r\n    },\r\n    {\r\n        \"x\": 180,\r\n        \"y\": 280,\r\n        \"z\": 260\r\n    },\r\n    {\r\n        \"x\": 210,\r\n        \"y\": 220,\r\n        \"z\": 230\r\n    }\r\n];\r\n\r\nconst AssertividadeChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n\r\n            mediaAssertList: {\r\n                id_estudante: String,\r\n                id_simulado: number,\r\n                assertividade: number\r\n            }[] = [],\r\n\r\n            mediaTempoList: {\r\n                id_estudante: String,\r\n                id_simulado: number,\r\n                tempo: number\r\n            }[] = [],\r\n            id_estudante: String,\r\n            currentStudant: String,\r\n            mediaAssert = 0,\r\n            mediaTempo = 0,\r\n            somaAssert = 0,\r\n            somaTempo = 0,\r\n            contSimu = 0,\r\n            maiorTempo = 0,\r\n            maiorAssert = 0\r\n            ;\r\n\r\n        contSimu = 0;\r\n        somaTempo = 0;\r\n        ResponseTimeData.forEach((item, index) => {\r\n\r\n            if (contSimu === 0)\r\n                currentStudant = item.id_estudante;\r\n\r\n            if (item.id_estudante != currentStudant\r\n                || index + 1 == ResponseTimeData.length\r\n            ) {\r\n                if (index + 1 == ResponseTimeData.length) {\r\n                    somaTempo += item.tempo;\r\n                    contSimu++;\r\n                }\r\n\r\n                mediaTempo = somaTempo / contSimu;\r\n\r\n                mediaTempoList.push({\r\n                    \"id_estudante\": item.id_estudante,\r\n                    \"id_simulado\": item.id_simulado,\r\n                    \"tempo\": parseFloat(mediaTempo.toFixed(2))\r\n                });\r\n\r\n                if (mediaTempo > maiorTempo)\r\n                    maiorTempo = parseFloat(mediaTempo.toFixed(2));\r\n\r\n                contSimu = 0;\r\n            } else {\r\n                somaTempo += item.tempo;\r\n                contSimu++;\r\n            }\r\n\r\n\r\n        });\r\n\r\n        AssertividadeData.forEach((item, index) => {\r\n\r\n            if (contSimu === 0)\r\n                currentStudant = item.id_estudante;\r\n\r\n            if (item.id_estudante != currentStudant\r\n                || index + 1 == AssertividadeData.length\r\n            ) {\r\n                if (index + 1 == AssertividadeData.length) {\r\n                    somaAssert += item.assertividade;\r\n                    contSimu++;\r\n                }\r\n\r\n                mediaAssert = somaAssert / contSimu;\r\n\r\n                mediaAssertList.push({\r\n                    \"id_estudante\": item.id_estudante,\r\n                    \"id_simulado\": item.id_simulado,\r\n                    \"assertividade\": parseFloat(mediaAssert.toFixed(2))\r\n                });\r\n\r\n                if (mediaAssert > maiorAssert)\r\n                    maiorAssert = parseFloat(mediaAssert.toFixed(2));\r\n\r\n                contSimu = 0;\r\n            } else {\r\n                somaAssert += item.assertividade;\r\n                contSimu++;\r\n            }\r\n\r\n        });\r\n\r\n        //console.log(mediaAssertList);\r\n\r\n        mediaAssertList.forEach(item => {\r\n            for (var i = 0; i < mediaTempoList.length; i++) {\r\n                let kmensItem = [];\r\n\r\n                if (item.id_estudante === mediaTempoList[i].id_estudante\r\n                    //&& item.id_simulado === mediaTempoList[i].id_simulado\r\n                ) {\r\n                    kmensItem.push(parseFloat(item.assertividade.toFixed(2)));\r\n                    kmensItem.push(mediaTempoList[i].tempo);\r\n                    kmensList.push(kmensItem);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        //console.log(kmensList);\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const compreensao = item[0],\r\n                tempo = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": tempo,\r\n                \"y\": compreensao\r\n            };\r\n\r\n            if (compreensao >= 0 && compreensao <= maiorAssert / 2 &&\r\n                tempo >= 0 && tempo <= maiorTempo / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (compreensao > maiorAssert / 2 && compreensao <= maiorAssert &&\r\n                tempo >= 0 && tempo <= maiorTempo / 2) {\r\n                grupo2.push(dadosItem);\r\n            } else if (compreensao >= 0 && compreensao <= maiorAssert / 2 &&\r\n                tempo > maiorTempo / 2 && tempo <= maiorTempo) {\r\n                grupo3.push(dadosItem);\r\n            } else if (compreensao > maiorAssert / 2 && compreensao <= maiorAssert &&\r\n                tempo > maiorTempo / 2 && tempo <= maiorTempo) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"tempo\" unit=\"s\" />\r\n                <YAxis dataKey=\"y\" name=\"assertividade\" unit=\"a\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AssertividadeChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemAssertividadeChart.tsx",["152","153","154","155","156"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst DesordemAssertividadeChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            somaTempo = 0,\r\n            contSimu = 0,\r\n            maiorDesordem = 0,\r\n            maiorAssert = 0\r\n            ;\r\n\r\n        contSimu = 0;\r\n        somaTempo = 0;\r\n\r\n\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let desordem = parseFloat(item.desordem.toFixed(2));\r\n            let assertividade = parseFloat(item.assertividade.toFixed(2));\r\n\r\n            if (desordem > maiorDesordem)\r\n                maiorDesordem = desordem;\r\n            if (assertividade > maiorAssert)\r\n                maiorAssert = assertividade;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(desordem);\r\n            kmensItem.push(assertividade);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const desordem = item[0],\r\n                assertividade = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": desordem,\r\n                \"y\": assertividade\r\n            };\r\n\r\n            if (desordem >= 0 && desordem <= maiorDesordem / 2 &&\r\n                assertividade >= 0 && assertividade <= maiorAssert / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (desordem >= 0 && desordem <= maiorDesordem / 2 &&\r\n                assertividade > maiorAssert / 2 && assertividade <= maiorAssert) {\r\n                grupo2.push(dadosItem);\r\n            } else if (desordem > maiorDesordem / 2 && desordem <= maiorDesordem &&\r\n                assertividade >= 0 && assertividade <= maiorAssert / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (desordem > maiorDesordem / 2 && desordem <= maiorDesordem &&\r\n                assertividade > maiorAssert / 2 && assertividade <= maiorAssert) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"desordem\" unit=\"d\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"assertividade\" unit=\"a\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DesordemAssertividadeChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DuvidaAssertividadeChart.tsx",["157","158","159","160","161"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst DuvidaAssertividadeChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            somaTempo = 0,\r\n            contSimu = 0,\r\n            maiorDuvida = 0,\r\n            maiorAssert = 0\r\n            ;\r\n\r\n        contSimu = 0;\r\n        somaTempo = 0;\r\n\r\n\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let duvida = parseFloat(item.duvida.toFixed(2));\r\n            let assertividade = parseFloat(item.assertividade.toFixed(2));\r\n\r\n            if (duvida > maiorDuvida)\r\n                maiorDuvida = duvida;\r\n            if (assertividade > maiorAssert)\r\n                maiorAssert = assertividade;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(duvida);\r\n            kmensItem.push(assertividade);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const duvida = item[0],\r\n                assertividade = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": duvida,\r\n                \"y\": assertividade\r\n            };\r\n\r\n            if (duvida >= 0 && duvida <= maiorDuvida / 2 &&\r\n                assertividade >= 0 && assertividade <= maiorAssert / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (duvida >= 0 && duvida <= maiorDuvida / 2 &&\r\n                assertividade > maiorAssert / 2 && assertividade <= maiorAssert) {\r\n                grupo2.push(dadosItem);\r\n            } else if (duvida > maiorDuvida / 2 && duvida <= maiorDuvida &&\r\n                assertividade >= 0 && assertividade <= maiorAssert / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (duvida > maiorDuvida / 2 && duvida <= maiorDuvida &&\r\n                assertividade > maiorAssert / 2 && assertividade <= maiorAssert) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"duvida\" unit=\"d\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"assertividade\" unit=\"a\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DuvidaAssertividadeChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\CompreensaoAssertividadeChart.tsx",["162","163","164","165","166"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst CompreensaoAssertividadeChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            somaTempo = 0,\r\n            contSimu = 0,\r\n            maiorComp = 0,\r\n            maiorAssert = 0\r\n            ;\r\n\r\n        contSimu = 0;\r\n        somaTempo = 0;\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let compreensao = parseFloat(item.compreensao.toFixed(2));\r\n            let assertividade = parseFloat(item.assertividade.toFixed(2));\r\n\r\n            if (compreensao > maiorComp)\r\n                maiorComp = compreensao;\r\n            if (assertividade > maiorAssert)\r\n                maiorAssert = assertividade;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(compreensao);\r\n            kmensItem.push(assertividade);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const compreensao = item[0],\r\n                assertividade = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": compreensao,\r\n                \"y\": assertividade\r\n            };\r\n\r\n            if (compreensao >= 0 && compreensao <= maiorComp / 2 &&\r\n                assertividade >= 0 && assertividade <= maiorAssert / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (compreensao >= 0 && compreensao <= maiorComp / 2 &&\r\n                assertividade > maiorAssert / 2 && assertividade <= maiorAssert) {\r\n                grupo2.push(dadosItem);\r\n            } else if (compreensao > maiorComp / 2 && compreensao <= maiorComp &&\r\n                assertividade >= 0 && assertividade <= maiorAssert / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (compreensao > maiorComp / 2 && compreensao <= maiorComp &&\r\n                assertividade > maiorAssert / 2 && assertividade <= maiorAssert) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"compreensÃ£o\" unit=\"c\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"assertividade\" unit=\"a\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CompreensaoAssertividadeChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemTempoChart.tsx",["167","168","169"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst DesordemTempoChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            maiorX = 0,\r\n            maiorY = 0\r\n            ;\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let desordem = parseFloat(item.desordem.toFixed(2));\r\n            let tempo = parseFloat(item.tempo_medio.toFixed(2));\r\n\r\n            if (desordem > maiorX)\r\n                maiorX = desordem;\r\n            if (tempo > maiorY)\r\n                maiorY = tempo;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(desordem);\r\n            kmensItem.push(tempo);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const desordem = item[0],\r\n                tempo = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": desordem,\r\n                \"y\": tempo\r\n            };\r\n\r\n            if (desordem >= 0 && desordem <= maiorX / 2 &&\r\n                tempo >= 0 && tempo <= maiorY / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (desordem >= 0 && desordem <= maiorX / 2 &&\r\n                tempo > maiorY / 2 && tempo <= maiorY) {\r\n                grupo2.push(dadosItem);\r\n            } else if (desordem > maiorX / 2 && desordem <= maiorX &&\r\n                tempo >= 0 && tempo <= maiorY / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (desordem > maiorX / 2 && desordem <= maiorX &&\r\n                tempo > maiorY / 2 && tempo <= maiorY) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"desordem\" unit=\"d\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"tempo\" unit=\"s\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DesordemTempoChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemDuvidaChart.tsx",["170","171","172"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst DesordemDuvidaChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            maiorX = 0,\r\n            maiorY = 0\r\n            ;\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let desordem = parseFloat(item.desordem.toFixed(2));\r\n            let duvida = parseFloat(item.duvida.toFixed(2));\r\n\r\n            if (desordem > maiorX)\r\n                maiorX = desordem;\r\n            if (duvida > maiorY)\r\n                maiorY = duvida;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(desordem);\r\n            kmensItem.push(duvida);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const desordem = item[0],\r\n                duvida = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": desordem,\r\n                \"y\": duvida\r\n            };\r\n\r\n            if (desordem >= 0 && desordem <= maiorX / 2 &&\r\n                duvida >= 0 && duvida <= maiorY / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (desordem >= 0 && desordem <= maiorX / 2 &&\r\n                duvida > maiorY / 2 && duvida <= maiorY) {\r\n                grupo2.push(dadosItem);\r\n            } else if (desordem > maiorX / 2 && desordem <= maiorX &&\r\n                duvida >= 0 && duvida <= maiorY / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (desordem > maiorX / 2 && desordem <= maiorX &&\r\n                duvida > maiorY / 2 && duvida <= maiorY) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"desordem\" unit=\"de\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"duvida\" unit=\"du\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DesordemDuvidaChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DuvidaTempoChart.tsx",["173","174","175"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst DuvidaTempoChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            maiorX = 0,\r\n            maiorY = 0\r\n            ;\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let duvida = parseFloat(item.duvida.toFixed(2));\r\n            let tempo = parseFloat(item.tempo_medio.toFixed(2));\r\n\r\n            if (duvida > maiorX)\r\n                maiorX = duvida;\r\n            if (tempo > maiorY)\r\n                maiorY = tempo;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(duvida);\r\n            kmensItem.push(tempo);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const duvida = item[0],\r\n                tempo = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": duvida,\r\n                \"y\": tempo\r\n            };\r\n\r\n            if (duvida >= 0 && duvida <= maiorX / 2 &&\r\n                tempo >= 0 && tempo <= maiorY / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (duvida >= 0 && duvida <= maiorX / 2 &&\r\n                tempo > maiorY / 2 && tempo <= maiorY) {\r\n                grupo2.push(dadosItem);\r\n            } else if (duvida > maiorX / 2 && duvida <= maiorX &&\r\n                tempo >= 0 && tempo <= maiorY / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (duvida > maiorX / 2 && duvida <= maiorX &&\r\n                tempo > maiorY / 2 && tempo <= maiorY) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"duvida\" unit=\"d\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"tempo\" unit=\"s\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DuvidaTempoChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\CompreensaoMediaChart.tsx",["176","177","178"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst CompreensaoMediaChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            maiorX = 0,\r\n            maiorY = 0\r\n            ;\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let compreensao = parseFloat(item.compreensao.toFixed(2));\r\n            let mediaSimu = parseFloat(item.media_simulado.toFixed(2));\r\n\r\n            if (compreensao > maiorX)\r\n                maiorX = compreensao;\r\n            if (mediaSimu > maiorY)\r\n                maiorY = mediaSimu;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(compreensao);\r\n            kmensItem.push(mediaSimu);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const compreensao = item[0],\r\n                mediaSimu = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": compreensao,\r\n                \"y\": mediaSimu\r\n            };\r\n\r\n            if (compreensao >= 0 && compreensao <= maiorX / 2 &&\r\n                mediaSimu >= 0 && mediaSimu <= maiorY / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (compreensao >= 0 && compreensao <= maiorX / 2 &&\r\n                mediaSimu > maiorY / 2 && mediaSimu <= maiorY) {\r\n                grupo2.push(dadosItem);\r\n            } else if (compreensao > maiorX / 2 && compreensao <= maiorX &&\r\n                mediaSimu >= 0 && mediaSimu <= maiorY / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (compreensao > maiorX / 2 && compreensao <= maiorX &&\r\n                mediaSimu > maiorY / 2 && mediaSimu <= maiorY) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"compreensÃ£o\" unit=\"c\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"mÃ©dia\" unit=\"m\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CompreensaoMediaChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DuvidaMediaChart.tsx",["179","180","181"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst DuvidaMediaChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            maiorX = 0,\r\n            maiorY = 0\r\n            ;\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let duvida = parseFloat(item.duvida.toFixed(2));\r\n            let mediaSimu = parseFloat(item.media_simulado.toFixed(2));\r\n\r\n            if (duvida > maiorX)\r\n                maiorX = duvida;\r\n            if (mediaSimu > maiorY)\r\n                maiorY = mediaSimu;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(duvida);\r\n            kmensItem.push(mediaSimu);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const duvida = item[0],\r\n                mediaSimu = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": duvida,\r\n                \"y\": mediaSimu\r\n            };\r\n\r\n            if (duvida >= 0 && duvida <= maiorX / 2 &&\r\n                mediaSimu >= 0 && mediaSimu <= maiorY / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (duvida >= 0 && duvida <= maiorX / 2 &&\r\n                mediaSimu > maiorY / 2 && mediaSimu <= maiorY) {\r\n                grupo2.push(dadosItem);\r\n            } else if (duvida > maiorX / 2 && duvida <= maiorX &&\r\n                mediaSimu >= 0 && mediaSimu <= maiorY / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (duvida > maiorX / 2 && duvida <= maiorX &&\r\n                mediaSimu > maiorY / 2 && mediaSimu <= maiorY) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"duvida\" unit=\"d\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"mÃ©dia\" unit=\"m\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DuvidaMediaChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\DesordemMediaChart.tsx",["182","183","184"],"import React, { FC, useState, useEffect } from 'react';\r\nimport {\r\n    XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterChart, ZAxis, Scatter,\r\n} from 'recharts';\r\nimport Title from '../../../Title';\r\nimport DadosGeraisData from '../../../contracts/modules/charts/dados_gerais.json';\r\n\r\nconst DesordemMediaChart: React.FC<any> = ({ title }) => {\r\n    const [grupo1, setGrupo1] = useState<Array<Object>>([]);\r\n    const [grupo2, setGrupo2] = useState<Array<Object>>([]);\r\n    const [grupo3, setGrupo3] = useState<Array<Object>>([]);\r\n    const [grupo4, setGrupo4] = useState<Array<Object>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let kmensList: Array<Array<number>> = [],\r\n            maiorX = 0,\r\n            maiorY = 0\r\n            ;\r\n\r\n        DadosGeraisData.forEach(item => {\r\n            let desordem = parseFloat(item.desordem.toFixed(2));\r\n            let mediaSimu = parseFloat(item.media_simulado.toFixed(2));\r\n\r\n            if (desordem > maiorX)\r\n                maiorX = desordem;\r\n            if (mediaSimu > maiorY)\r\n                maiorY = mediaSimu;\r\n\r\n            let kmensItem = [];\r\n            kmensItem.push(desordem);\r\n            kmensItem.push(mediaSimu);\r\n            kmensList.push(kmensItem);\r\n\r\n        });\r\n\r\n        kmensList.forEach(item => {\r\n            let dadosItem = {};\r\n            const desordem = item[0],\r\n                mediaSimu = item[1];\r\n\r\n            dadosItem = {\r\n                \"x\": desordem,\r\n                \"y\": mediaSimu\r\n            };\r\n\r\n            if (desordem >= 0 && desordem <= maiorX / 2 &&\r\n                mediaSimu >= 0 && mediaSimu <= maiorY / 2) {\r\n                grupo1.push(dadosItem);\r\n            } else if (desordem >= 0 && desordem <= maiorX / 2 &&\r\n                mediaSimu > maiorY / 2 && mediaSimu <= maiorY) {\r\n                grupo2.push(dadosItem);\r\n            } else if (desordem > maiorX / 2 && desordem <= maiorX &&\r\n                mediaSimu >= 0 && mediaSimu <= maiorY / 2) {\r\n                grupo3.push(dadosItem);\r\n            } else if (desordem > maiorX / 2 && desordem <= maiorX &&\r\n                mediaSimu > maiorY / 2 && mediaSimu <= maiorY) {\r\n                grupo4.push(dadosItem);\r\n            }\r\n        });\r\n\r\n\r\n        setGrupo1(grupo1);\r\n        setGrupo2(grupo2);\r\n        setGrupo3(grupo3);\r\n        setGrupo4(grupo4);\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Title title={title} />\r\n            <ScatterChart width={730} height={250}\r\n                margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" name=\"desordem\" unit=\"d\" />\r\n                <YAxis type=\"number\" dataKey=\"y\" name=\"mÃ©dia\" unit=\"m\" />\r\n\r\n                <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n                <Legend />\r\n\r\n                <Scatter className=\"2018139340207\" data={grupo1} fill=\"#82ca9d\" />\r\n                <Scatter className=\"2018139340118\" data={grupo2} fill=\"#8884d8\" />\r\n                <Scatter className=\"2018139340118\" data={grupo3} fill=\"#ff0000\" />\r\n                <Scatter className=\"2018139340118\" data={grupo4} fill=\"#0000ff\" />\r\n            </ScatterChart>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default DesordemMediaChart;","D:\\docs\\Documents\\workspace\\signal\\src\\modules\\dashboard\\charts\\TempoMediaChart.tsx",["185","186","187"],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":13,"column":8,"nodeType":"194","messageId":"195","endLine":13,"endColumn":13},{"ruleId":"192","severity":1,"message":"196","line":20,"column":8,"nodeType":"194","messageId":"195","endLine":20,"endColumn":25},{"ruleId":"192","severity":1,"message":"197","line":21,"column":25,"nodeType":"194","messageId":"195","endLine":21,"endColumn":43},{"ruleId":"192","severity":1,"message":"198","line":23,"column":8,"nodeType":"194","messageId":"195","endLine":23,"endColumn":16},{"ruleId":"192","severity":1,"message":"199","line":24,"column":8,"nodeType":"194","messageId":"195","endLine":24,"endColumn":14},{"ruleId":"192","severity":1,"message":"200","line":6,"column":8,"nodeType":"194","messageId":"195","endLine":6,"endColumn":21},{"ruleId":"192","severity":1,"message":"201","line":7,"column":8,"nodeType":"194","messageId":"195","endLine":7,"endColumn":24},{"ruleId":"192","severity":1,"message":"202","line":8,"column":8,"nodeType":"194","messageId":"195","endLine":8,"endColumn":18},{"ruleId":"192","severity":1,"message":"203","line":10,"column":8,"nodeType":"194","messageId":"195","endLine":10,"endColumn":18},{"ruleId":"192","severity":1,"message":"204","line":3,"column":20,"nodeType":"194","messageId":"195","endLine":3,"endColumn":24},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"204","line":3,"column":20,"nodeType":"194","messageId":"195","endLine":3,"endColumn":24},{"ruleId":"192","severity":1,"message":"206","line":8,"column":7,"nodeType":"194","messageId":"195","endLine":8,"endColumn":11},{"ruleId":"192","severity":1,"message":"207","line":38,"column":9,"nodeType":"194","messageId":"195","endLine":38,"endColumn":15},{"ruleId":"208","severity":1,"message":"209","line":38,"column":49,"nodeType":"210","messageId":"211","endLine":38,"endColumn":51},{"ruleId":"212","severity":1,"message":"213","line":41,"column":21,"nodeType":"214","messageId":"215","endLine":41,"endColumn":59,"fix":"216"},{"ruleId":"212","severity":1,"message":"213","line":52,"column":21,"nodeType":"214","messageId":"215","endLine":52,"endColumn":59,"fix":"217"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"192","severity":1,"message":"219","line":9,"column":7,"nodeType":"194","messageId":"195","endLine":9,"endColumn":13},{"ruleId":"192","severity":1,"message":"220","line":41,"column":7,"nodeType":"194","messageId":"195","endLine":41,"endColumn":13},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"192","severity":1,"message":"219","line":9,"column":7,"nodeType":"194","messageId":"195","endLine":9,"endColumn":13},{"ruleId":"192","severity":1,"message":"220","line":41,"column":7,"nodeType":"194","messageId":"195","endLine":41,"endColumn":13},{"ruleId":"221","severity":1,"message":"222","line":110,"column":39,"nodeType":"223","messageId":"224","endLine":110,"endColumn":41},{"ruleId":"221","severity":1,"message":"222","line":137,"column":39,"nodeType":"223","messageId":"224","endLine":137,"endColumn":41},{"ruleId":"225","severity":1,"message":"226","line":212,"column":8,"nodeType":"227","endLine":212,"endColumn":10,"suggestions":"228"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"192","severity":1,"message":"219","line":9,"column":7,"nodeType":"194","messageId":"195","endLine":9,"endColumn":13},{"ruleId":"192","severity":1,"message":"220","line":41,"column":7,"nodeType":"194","messageId":"195","endLine":41,"endColumn":13},{"ruleId":"192","severity":1,"message":"229","line":95,"column":13,"nodeType":"194","messageId":"195","endLine":95,"endColumn":33},{"ruleId":"221","severity":1,"message":"222","line":113,"column":35,"nodeType":"223","messageId":"224","endLine":113,"endColumn":37},{"ruleId":"221","severity":1,"message":"230","line":114,"column":30,"nodeType":"223","messageId":"224","endLine":114,"endColumn":32},{"ruleId":"221","severity":1,"message":"230","line":116,"column":31,"nodeType":"223","messageId":"224","endLine":116,"endColumn":33},{"ruleId":"221","severity":1,"message":"222","line":146,"column":35,"nodeType":"223","messageId":"224","endLine":146,"endColumn":37},{"ruleId":"221","severity":1,"message":"230","line":147,"column":30,"nodeType":"223","messageId":"224","endLine":147,"endColumn":32},{"ruleId":"221","severity":1,"message":"230","line":149,"column":31,"nodeType":"223","messageId":"224","endLine":149,"endColumn":33},{"ruleId":"225","severity":1,"message":"226","line":222,"column":8,"nodeType":"227","endLine":222,"endColumn":10,"suggestions":"231"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"192","severity":1,"message":"232","line":23,"column":9,"nodeType":"194","messageId":"195","endLine":23,"endColumn":17},{"ruleId":"192","severity":1,"message":"233","line":24,"column":9,"nodeType":"194","messageId":"195","endLine":24,"endColumn":18},{"ruleId":"225","severity":1,"message":"226","line":74,"column":8,"nodeType":"227","endLine":74,"endColumn":10,"suggestions":"234"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"192","severity":1,"message":"232","line":23,"column":9,"nodeType":"194","messageId":"195","endLine":23,"endColumn":17},{"ruleId":"192","severity":1,"message":"233","line":24,"column":9,"nodeType":"194","messageId":"195","endLine":24,"endColumn":18},{"ruleId":"225","severity":1,"message":"226","line":73,"column":8,"nodeType":"227","endLine":73,"endColumn":10,"suggestions":"235"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"192","severity":1,"message":"232","line":23,"column":9,"nodeType":"194","messageId":"195","endLine":23,"endColumn":17},{"ruleId":"192","severity":1,"message":"233","line":24,"column":9,"nodeType":"194","messageId":"195","endLine":24,"endColumn":18},{"ruleId":"225","severity":1,"message":"226","line":72,"column":8,"nodeType":"227","endLine":72,"endColumn":10,"suggestions":"236"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":67,"column":8,"nodeType":"227","endLine":67,"endColumn":10,"suggestions":"237"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":67,"column":8,"nodeType":"227","endLine":67,"endColumn":10,"suggestions":"238"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":67,"column":8,"nodeType":"227","endLine":67,"endColumn":10,"suggestions":"239"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":67,"column":8,"nodeType":"227","endLine":67,"endColumn":10,"suggestions":"240"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":67,"column":8,"nodeType":"227","endLine":67,"endColumn":10,"suggestions":"241"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":67,"column":8,"nodeType":"227","endLine":67,"endColumn":10,"suggestions":"242"},{"ruleId":"192","severity":1,"message":"205","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":19},{"ruleId":"192","severity":1,"message":"218","line":3,"column":65,"nodeType":"194","messageId":"195","endLine":3,"endColumn":70},{"ruleId":"225","severity":1,"message":"226","line":67,"column":8,"nodeType":"227","endLine":67,"endColumn":10,"suggestions":"243"},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"@typescript-eslint/no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'NotificationsIcon' is defined but never used.","'secondaryListItems' is defined but never used.","'Deposits' is defined but never used.","'Orders' is defined but never used.","'DashboardIcon' is defined but never used.","'ShoppingCartIcon' is defined but never used.","'PeopleIcon' is defined but never used.","'LayersIcon' is defined but never used.","'Cell' is defined but never used.","'FC' is defined but never used.","'data' is assigned a value but never used.","'aluno1' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-computed-key","Unnecessarily computed property [\"name\"] found.","Property","unnecessarilyComputedProperty",{"range":"246","text":"247"},{"range":"248","text":"247"},"'ZAxis' is defined but never used.","'data01' is assigned a value but never used.","'data02' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'grupo1', 'grupo2', 'grupo3', and 'grupo4'. Either include them or remove the dependency array. You can also do a functional update 'setGrupo1(g => ...)' if you only need 'grupo1' in the 'setGrupo1' call.","ArrayExpression",["249"],"'id_estudante' is defined but never used.","Expected '===' and instead saw '=='.",["250"],"'contSimu' is assigned a value but never used.","'somaTempo' is assigned a value but never used.",["251"],["252"],["253"],["254"],["255"],["256"],["257"],["258"],["259"],["260"],"no-global-assign","no-unsafe-negation",[1202,1210],"\"name\"",[1618,1626],{"desc":"261","fix":"262"},{"desc":"261","fix":"263"},{"desc":"261","fix":"264"},{"desc":"261","fix":"265"},{"desc":"261","fix":"266"},{"desc":"261","fix":"267"},{"desc":"261","fix":"268"},{"desc":"261","fix":"269"},{"desc":"261","fix":"270"},{"desc":"261","fix":"271"},{"desc":"261","fix":"272"},{"desc":"261","fix":"273"},"Update the dependencies array to be: [grupo1, grupo2, grupo3, grupo4]",{"range":"274","text":"275"},{"range":"276","text":"275"},{"range":"277","text":"275"},{"range":"278","text":"275"},{"range":"279","text":"275"},{"range":"280","text":"275"},{"range":"281","text":"275"},{"range":"282","text":"275"},{"range":"283","text":"275"},{"range":"284","text":"275"},{"range":"285","text":"275"},{"range":"286","text":"275"},[6159,6161],"[grupo1, grupo2, grupo3, grupo4]",[6170,6172],[2621,2623],[2569,2571],[2629,2631],[2283,2285],[2293,2295],[2251,2253],[2390,2392],[2310,2312],[2342,2344],[2300,2302]]